include './configs/parser.gin'
include './configs/model.gin'

import losses.base_losses
import losses.maskrcnn_losses
import losses.multitask_losses
import losses.optimizers
import metrics.coco_metrics
import metrics.metrics
import metrics.multitask_metrics
import utils.trainer_utils
import utils.checkpoint_utils
import utils.dataset_utils
import utils.task_utils

TRAIN_STEPS = 184400 # Default TRAIN_STEPS=46100 for TRAIN_BS=256 (100 epochs).
OUTPUT_SIZE = 512 # Default OUTPUT_SIZE=1024. Use 512 to fit a 1080 GPU.
ANCHOR_SIZE = 8
MIN_LEVEL = 2
MAX_LEVEL = 6
TEMP = 0.01
MAX_NUM_INSTANCES = 100
TRAIN_FILE_PATTERN = './datasets/coco/train-*'
EVAL_FILE_PATTERN = './datasets/coco/val-*'
EMBED_PATH = './embeddings/resnet_50/coco_embed.npy'
CATG_PAD_SIZE = 91 # Max # of categories among training datasets.
EVAL_STEPS = 5000 # EVAL_STEPS * EVAL_BS = # eval examples.

TRAIN_BS = 4  # Default TRAIN_BS=256 for 4x4 TPUv3. Use 4 to fit a 1080 GPU.
EVAL_BS = 1
AUG_SCALE_MIN = 0.1
AUG_SCALE_MAX = 2.0
WEIGHT_DECAY = 1e-4
DTYPE = %jnp.float32 # Set to bfloat16 for time/memory savings.
BN_GROUP_SIZE = %TRAIN_BS # Sync Batchnorm across the whole batch.
INCLUDE_MASK = False
METRICS_DIR_NAME = 'coco_metrics'  # Temporarily save the output metrics.

# Change these parameters for different CLIP backbones.
# =====================================================
CLIP_NAME = 'resnet_50'
TEXT_DIM = 1024
AttentionPool.num_heads = 32
ClipFasterRCNNHead.roi_output_size = 7
# =====================================================

train/get_input.return_dataset = True
get_input_mixture:
  # Users can add more datasets as needed as comma separated list.
  loader_fns = [@train/get_input,]
  batch_size = %TRAIN_BS
  sampling_weights = None
  feature_names = ['images', 'texts', 'labels']
  label_names = ['labels']

# Vocab embeddings
load_dataset_vocab_embed.embedding_path = %EMBED_PATH

set_remap:
  MultitaskModel___call__ = {'images': 'image', 'texts': 'text'}

MaskRCNNLoss.include_masks = False
MaskRCNNLoss.class_box_regression = %CLS_BOX_REG
MaskRCNNLoss.frcnn_background_weight = 0.9

# Define tasks
DetectionTask._loss = @MaskRCNNLoss()
DetectionTask.head = @ClipFasterRCNNHead
TASKS = (@DetectionTask(),)

MultitaskModel.tasks = %TASKS
MultitaskModel.train_vision_model = False
MultitaskModel.dtype = %DTYPE
process_and_generate_detections.class_is_logit = False
ClipFasterRCNNHead.clip_sim_temp = 0.01

MaskRCNNLoss.include_masks = %INCLUDE_MASK
ClipFasterRCNNHead.include_mask = %INCLUDE_MASK
maskrcnn_map_fn.include_mask = %INCLUDE_MASK

# Learning rates.
step_learning_rate_with_linear_warmup.init_learning_rate = 0.02  # Default 0.36.
step_learning_rate_with_linear_warmup.warmup_learning_rate = 0.0032
step_learning_rate_with_linear_warmup.warmup_steps = 100
step_learning_rate_with_linear_warmup.total_steps = %TRAIN_STEPS
step_learning_rate_with_linear_warmup.learning_rate_step_ratios = [0.8, 0.9, 0.95]
step_learning_rate_with_linear_warmup.decay_factor = 0.1

# Define losses.
get_multitask_loss_fn.tasks = %TASKS
weight_decay_loss_wrapper.loss_fn = @get_multitask_loss_fn()
weight_decay_loss_wrapper.factor = %WEIGHT_DECAY
weight_decay_loss_wrapper.exclude = [
    'bn', 'vision_model', 'temperature', 'attnpool']

# Training the model.
train.input_fn = @get_input_mixture
train.model_fn = @MultitaskModel
train.optimizer_def = @Momentum()
train.loss_fn = @weight_decay_loss_wrapper()
train.total_train_steps = %TRAIN_STEPS
train.learning_rate = @step_learning_rate_with_linear_warmup
train.pretrained_clip = %CLIP_NAME
train.clip_target_filters = [('vision_model', ('.+')), ('task_heads_0', 'attnpool')]
train.clip_pretrained_filters = [('', '.+')]
train.log_flops = False  # Disable to save launch time.

# Evaluating the model.
get_host_evaluator.evaluator_name = %coco_metrics.EvaluatorName.COCO
get_host_evaluator.include_mask = %INCLUDE_MASK
get_host_evaluator.annotation_file = './datasets/coco/instances_val2017.json'

evaluate.input_fn = @eval/get_input
evaluate.model_fn = @MultitaskModel
evaluate.optimizer_def = @Momentum()
evaluate.eval_steps = %EVAL_STEPS
evaluate.host_evaluator = @get_host_evaluator()
evaluate.total_train_steps = %TRAIN_STEPS
evaluate.metrics_dir_name = %METRICS_DIR_NAME
