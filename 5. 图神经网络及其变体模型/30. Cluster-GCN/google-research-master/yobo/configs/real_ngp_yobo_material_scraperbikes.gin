include './real_ngp_yobo.gin'

Config.num_dataset_images = -1


Config.meshfile = ""
Config.use_mesh_face_normals = False

# Integrator
VolumeIntegrator.bg_intensity_range = (0, 1)

# Sampling and contraction
Config.near = 0.0
Config.far = 1e6

# Normals
DensityMLP.disable_density_normals = True
DensityMLP.enable_pred_normals = True

Config.orientation_loss_mult = 0.01
Config.orientation_loss_target = 'normals_pred'

Config.predicted_normal_loss_mult = 0.01
Config.predicted_normal_reverse_loss_mult = 0.2

# Loss
Config.data_loss_type = 'rawnerf_unbiased_original'
Config.data_coarse_loss_mult = 1.0

MaterialModel.loss_weight = 1.0
MaterialModel.loss = 'rawnerf_unbiased_original'
MaterialModel.linear_to_srgb = False

MaterialModel.aux_loss_weight = 1.0
MaterialModel.aux_loss = 'rawnerf_original'
MaterialModel.aux_linear_to_srgb = False

MaterialModel.aux_loss_weight_material = 1.0
MaterialModel.aux_loss_material = 'rawnerf_unbiased_original'
MaterialModel.aux_linear_to_srgb_material = False

# Proposal
MaterialMLP.near_min = 0.0

ProposalVolumeSampler.mlp_params_per_level = (
    {
      'disable_density_normals': False,
      'enable_pred_normals': False,
      'normals_for_filter_only': True,
      'backfacing_target': 'normals',
      'backfacing_near': 5e-2,
      'net_depth': 2,
      'net_width': 64,
    },
    {
      'disable_density_normals': False,
      'enable_pred_normals': False,
      'normals_for_filter_only': True,
      'backfacing_target': 'normals',
      'backfacing_near': 1e-1,
      'net_depth': 2,
      'net_width': 64,
    },
    {
      'disable_density_normals': False,
      'enable_pred_normals': True,
      'normals_for_filter_only': False,
      'backfacing_target': 'normals_to_use',
      'backfacing_near': 2e-1,
      'net_depth': 2,
      'net_width': 64,
    }
)

# Material Model
MaterialMLP.normals_target = 'normals'
MaterialMLP.importance_sampler_configs = (
    # ('microfacet', 2),
    # ('cosine', 1),
    # ('light', 1),
    ('microfacet', 1),
    ('cosine', 1),
)
MaterialMLP.render_importance_sampler_configs = (
    # ('microfacet', 2),
    # ('cosine', 1),
    # ('light', 1),
    ('microfacet', 1),
    ('cosine', 1),
)

# Light Sampler
Config.num_light_samples = 1

LightMLP.normals_target = 'normals'
