# Hyperparameters follow the classic Nature DQN, but we modify as necessary to
# match those used in Rainbow (Hessel et al., 2018), to ensure apples-to-apples
# comparison.
import dopamine.discrete_domains.atari_lib
import dopamine.discrete_domains.run_experiment
import dopamine.agents.dqn.dqn_agent
import dopamine.replay_memory.circular_replay_buffer
import gin.tf.external_configurables

import experience_replay.agents.dqn_agent
import experience_replay.run_experience_replay_experiment

DQNAgent.gamma = 0.99
DQNAgent.update_horizon = 1
DQNAgent.min_replay_history = 20000  # agent steps
DQNAgent.update_period = 4
DQNAgent.target_update_period = 8000  # agent steps
DQNAgent.epsilon_train = 0.01
DQNAgent.epsilon_eval = 0.001
DQNAgent.epsilon_decay_period = 250000  # agent steps
DQNAgent.tf_device = '/gpu:0'  # use '/cpu:*' for non-GPU version

ElephantDQNAgent.replay_scheme = 'uniform'
ElephantDQNAgent.oldest_policy_in_buffer = 250000  # Default value for 1M replay buffer

# Default DQN Optimizer
DQNAgent.optimizer = @tf.train.RMSPropOptimizer()
tf.train.RMSPropOptimizer.learning_rate = 0.00025
tf.train.RMSPropOptimizer.decay = 0.95
tf.train.RMSPropOptimizer.momentum = 0.0
tf.train.RMSPropOptimizer.epsilon = 0.00001
tf.train.RMSPropOptimizer.centered = True

atari_lib.create_atari_environment.game_name = 'Pong'
# Sticky actions with probability 0.25, as suggested by (Machado et al., 2017).
atari_lib.create_atari_environment.sticky_actions = False
run_experience_replay_experiment.create_agent.agent_name = 'dqn'

Runner.num_iterations = 200
Runner.training_steps = 250000  # agent steps
Runner.evaluation_steps = 125000  # agent steps
Runner.max_steps_per_episode = 27000  # agent steps
Runner.log_every_n = 10  # iterations
ElephantRunner.checkpoint_every_n = 10  # iterations

dopamine.replay_memory.circular_replay_buffer.WrappedReplayBuffer.replay_capacity = 10000000
dopamine.replay_memory.circular_replay_buffer.WrappedReplayBuffer.batch_size = 32

run_experience_replay_experiment.create_agent.debug_mode = True
