{"version":3,"sources":["App.module.css","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","App","App-link","loading","resultContainer","flickrUrl","details","ellipsis","search","SearchForm","state","value","ref","React","createRef","handleSubmit","e","preventDefault","val","_this","trim","props","onSubmit","current","blur","handleInputChanged","setState","target","react_default","a","createElement","className","styles","this","style","marginLeft","type","onChange","Component","FlickrUrl","account","href","concat","SearchResult","url","title","author","ffhqId","SearchResultList","dataset","limitedIds","ids","slice","resultRows","map","id","Object","assign","key","marginTop","length","searchString","Loading","processDataset","data","res","keys","forEach","m","match","undefined","Error","grepAccountFromUrl","objectSpread","searchResults","handleSetSearchString","_this2","searchItems","_this3","fetch","then","resp","json","searchTerm","toLowerCase","img","indexOf","push","sort","keyA","keyB","imgA","imgB","localeCompare","App_SearchForm","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3ccdce75.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2gdlJ\",\"App-link\":\"App_App-link__2b3Co\",\"loading\":\"App_loading__fEdJi\",\"resultContainer\":\"App_resultContainer__3Z2SS\",\"flickrUrl\":\"App_flickrUrl__Z9Hlv\",\"details\":\"App_details__d3YpQ\",\"ellipsis\":\"App_ellipsis__2pdXV\",\"search\":\"App_search__2F63v\"};","\nimport React, { Component } from 'react';\nimport styles from './App.module.css';\n\ninterface Meta {\n  url: string;\n  author: string;\n  title: string;\n  account: string;\n}\n\ninterface Dataset {\n  [id: string]: Meta;\n}\n\ninterface SearchFormProps {\n  onSubmit: (v: string) => void;\n}\n\ninterface SearchFormState {\n  value: string;\n}\n\nclass SearchForm extends Component<SearchFormProps, SearchFormState> {\n  state = { value: '' }\n\n  ref = React.createRef<HTMLInputElement>();\n\n  handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const val = this.state.value.trim();\n    if (val !== '') {\n      this.props.onSubmit(val);\n    }\n    if (this.ref.current) {\n      this.ref.current.blur();\n    }\n  }\n\n  handleInputChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ value: e.target.value });\n  }\n\n  render() {\n    const inputStyle = {\n      marginLeft: '10px',\n    }\n\n    return (\n      <form className={styles.search} onSubmit={this.handleSubmit}>\n        <label>Flickr login or display name:\n          <input\n            ref={this.ref}\n            value={this.state.value}\n            style={inputStyle} type='text'\n            onChange={this.handleInputChanged}\n          />\n          <button style={{marginLeft: '3px'}} type='submit'>Search</button>\n        </label>\n      </form>\n    )\n  }\n}\n\nfunction FlickrUrl(props: { account: string }) {\n  const { account } = props;\n  return (\n    <a className={styles.flickrUrl} href={`https://www.flickr.com/photos/${account}`}>{account}</a>\n  )\n}\n\nfunction SearchResult(props: Meta & {ffhqId: string}) {\n  return (\n    <div className={styles.resultContainer}>\n      <a href={props.url}>{props.title ? props.title : 'Untitled'}</a><br />\n      <div className={styles.details}>Author: {props.author}, Flickr: <FlickrUrl account={props.account} />, Ffhq Id: {props.ffhqId}</div>\n    </div>\n  )\n}\n\nfunction SearchResultList (props: {\n  ids: string[];\n  searchString: string;\n  dataset: Dataset | null;\n}) {\n  const dataset = props.dataset;\n  if (dataset == null) {\n    return null;\n  }\n\n  const maxResults = 3000;\n  const limitedIds = props.ids.slice(0, maxResults);\n\n  const resultRows = limitedIds.map(id => {\n    return (\n      <SearchResult key={id} {...dataset[id] } ffhqId={id} />\n    )\n  });\n\n  return (\n    <div style={{marginTop: '16px'}}>\n      {limitedIds.length != 0 ?\n        <span>\n          <h3>Results</h3>\n          {limitedIds.length < props.ids.length ? `Your search term '${props.searchString}' produced a large number of results.  Showing only the first ${maxResults} hits.` : null}\n          {resultRows}\n        </span> :\n        <h3>No results.</h3>}\n    </div>\n  )\n}\n\nfunction Loading() {\n  return <p className={styles.loading}>Loading</p>;\n}\n\nfunction grepAccountFromUrl(url: string) {\n  const reg = /^http[s]?:\\/\\/www\\.flickr\\.com\\/photos\\/([^\\/]+)\\/.*/;\n  const m = url.match(reg);\n  if (m !== null && m[1] !== undefined) {\n    return m[1];\n  }\n  throw new Error('Invalid input json -- should be able to match account name from flickr URL.');\n}\n\nfunction processDataset(data: any): Dataset {\n  const res: Dataset = {};\n  Object.keys(data).forEach((key: string) => {\n    const m: Meta = data[key];\n    const account = grepAccountFromUrl(m.url)\n    res[key] = {\n      ...m,\n      account\n    };\n  });\n  return res;\n}\n\ninterface AppState {\n  loading: boolean;\n  searchString: string;\n  dataset: Dataset | null;\n  searchResults: string[];\n}\n\nclass App extends Component<{}, AppState> {\n  state = {\n    loading: true,\n    searchString: '',\n    dataset: null,\n    searchResults: []\n  }\n\n  componentDidMount() {\n    fetch('ffhq-dataset-v1-processed.json')\n      .then(resp => resp.json())\n      .then(data => {\n        this.setState({\n          dataset: processDataset(data),\n          loading: false\n        });\n      });\n  }\n\n  searchItems (searchString: string) {\n    if (!this.state.dataset) {\n      return;\n    }\n\n    const dataset: Dataset = this.state.dataset!;\n\n    const ids: string[] = [];\n    const searchTerm = searchString.toLowerCase();\n\n    Object.keys(dataset).forEach((key: string) => {\n      const img = dataset[key];\n      const author = img.author.toLowerCase();\n      const account = img.account.toLowerCase();\n\n      if (account == searchTerm) {\n        ids.push(key);\n        return;\n      }\n\n      if (author.indexOf(searchTerm) != -1) {\n        ids.push(key);\n        return;\n      }\n    });\n\n    // Sort results by Flickr account name\n    ids.sort((keyA: string, keyB: string) => {\n      const imgA = dataset[keyA];\n      const imgB = dataset[keyB];\n      return imgA.account.localeCompare(imgB.account);\n    });\n\n    this.setState({\n      searchResults: ids\n    })\n  }\n\n  handleSetSearchString = (value: string) => {\n    this.setState({ searchString: value });\n    this.searchItems(value);\n  }\n\n  render() {\n    return (\n      <div className={styles.App}>\n        <h1>Flickr-Faces-HQ Dataset (FFHQ)</h1>\n        <p>Want to know if your images are included in the FFHQ dataset?  Use this tool to list images in the FFHQ for a given Flickr login or display name.</p>\n        <p>For more information, see <a href='https://stylegan.xyz/ffhq'>FFHQ dataset</a>.</p>\n        <SearchForm onSubmit={this.handleSetSearchString} />\n        {this.state.loading && <Loading />}\n        {this.state.searchString != '' &&\n          <SearchResultList\n            ids={this.state.searchResults}\n            dataset={this.state.dataset}\n            searchString={this.state.searchString}\n          />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}